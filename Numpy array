import numpy as np
nn = np.array([[1,2,3],[4,5,6],[7,8,9]])
print("nn shape = ",nn.shape)
for i in range(len(nn)):
    for j in range(len(nn[i])):
        print(i,"  ",j," = ",nn[i,j])
kk = nn

#playing with row
row_1 = (kk[1,:]) # print 1st row one rank
row_11 = kk[1:2,:] # print 1st row two rank row and col
print(row_1," shape = ",row_1.shape)
print(row_11," shape = ",row_11.shape)

#playing with column
col_1 = (kk[:,1])# print 1st col one rank
print(col_1,"shape = ",col_1.shape)
col_11 = (kk[:,1:2])# print 1st col two rank row and col
print(col_11,"shape = ",col_11.shape)

#Made a 2 by 2 matrix
print(kk[0:2,1:3]) #here 0:2 for row slicing 0 to 1 row AND 1:3 for col slicing col 1 to 3

#Made a zero matrix
zero = np.zeros((2,2))
print(zero)

#Made an identity matrix
id = np.eye(2)
print("id = ",id)

#made a matrix full of 7
fl = np.full((3,3),7)
print("f1 : ",fl)
print(">>>>>>>>>>>>>>>>>>>>>>>")

#Another numpy array indexing
dd = np.array([[1,2],[3,4],[5,6]])
print(dd[[0,1,2],[0,1,0]])
print(np.array([dd[0,0],dd[1,1],dd[2,0]]))
print(dd[[0,0],[1,1]])
print(np.array([dd[0,1],dd[0,1]]))

#boolen of np array
bool_idx = (dd > 2)
print(bool_idx)
print(dd[bool_idx])




#Playing with numpy array index
pp = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
b = np.array([0,2,0,1])#select column of pp array
print(pp[np.arange(4),b])#np.arange(4) because here 4 row will create from pp list
pp[np.arange(4),b] += 10
print(pp)


#printing printing type
pp = np.array([1,2])#numpy choose the data type
print(pp.dtype)
pp = np.array([1.0,2.0])
print(pp.dtype)
pp = np.array([1,2],dtype = np.int64)#Force a particular datatype
print(pp.dtype)
